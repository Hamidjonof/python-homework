import math

# 1. Circle Class
class Circle:
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return math.pi * self.radius ** 2
    
    def perimeter(self):
        return 2 * math.pi * self.radius

circle = Circle(5)
print("Circle Area:", circle.area())
print("Circle Perimeter:", circle.perimeter())

# 2. Person Class
from datetime import date

class Person:
    def __init__(self, name, country, birth_date):
        self.name = name
        self.country = country
        self.birth_date = birth_date
    
    def age(self):
        today = date.today()
        return today.year - self.birth_date.year - ((today.month, today.day) < (self.birth_date.month, self.birth_date.day))

person = Person("John", "USA", date(1990, 5, 15))
print("Age:", person.age())

# 3. Calculator Class
class Calculator:
    def add(self, a, b): return a + b
    def subtract(self, a, b): return a - b
    def multiply(self, a, b): return a * b
    def divide(self, a, b): return a / b if b != 0 else "Cannot divide by zero"

calc = Calculator()
print("Sum:", calc.add(5, 3))

# 4. Shape and Subclasses
class Shape:
    def area(self): pass
    def perimeter(self): pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius
    def area(self):
        return math.pi * self.radius ** 2
    def perimeter(self):
        return 2 * math.pi * self.radius

class Square(Shape):
    def __init__(self, side):
        self.side = side
    def area(self):
        return self.side ** 2
    def perimeter(self):
        return 4 * self.side

square = Square(4)
print("Square Area:", square.area())

# 5. Binary Search Tree Class
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

class BST:
    def __init__(self):
        self.root = None
    
    def insert(self, root, key):
        if root is None:
            return Node(key)
        if key < root.val:
            root.left = self.insert(root.left, key)
        else:
            root.right = self.insert(root.right, key)
        return root

bst = BST()
bst.root = bst.insert(bst.root, 10)

# 6. Stack Data Structure
class Stack:
    def __init__(self):
        self.stack = []
    
    def push(self, item):
        self.stack.append(item)
    
    def pop(self):
        return self.stack.pop() if self.stack else "Stack is empty"

stack = Stack()
stack.push(5)
print("Popped:", stack.pop())

# 7. Linked List Data Structure
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
    
    def insert(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
    
    def display(self):
        temp = self.head
        while temp:
            print(temp.data, end=" -> ")
            temp = temp.next
        print("None")

ll = LinkedList()
ll.insert(10)
ll.insert(20)
ll.display()

# 8. Shopping Cart Class
class ShoppingCart:
    def __init__(self):
        self.items = {}
    
    def add_item(self, item, price):
        self.items[item] = price
    
    def total_price(self):
        return sum(self.items.values())

cart = ShoppingCart()
cart.add_item("Apple", 1.5)
print("Total Price:", cart.total_price())

# 9. Stack with Display
class Stack:
    def __init__(self):
        self.stack = []
    
    def push(self, item):
        self.stack.append(item)
    
    def pop(self):
        return self.stack.pop() if self.stack else "Stack is empty"
    
    def display(self):
        print("Stack:", self.stack)

stack = Stack()
stack.push(10)
stack.display()

# 10. Queue Data Structure
class Queue:
    def __init__(self):
        self.queue = []
    
    def enqueue(self, item):
        self.queue.append(item)
    
    def dequeue(self):
        return self.queue.pop(0) if self.queue else "Queue is empty"

queue = Queue()
queue.enqueue(5)
print("Dequeued:", queue.dequeue())

# 11. Bank Class
class Bank:
    def __init__(self):
        self.accounts = {}
    
    def create_account(self, name, balance):
        self.accounts[name] = balance
    
    def deposit(self, name, amount):
        if name in self.accounts:
            self.accounts[name] += amount
    
    def withdraw(self, name, amount):
        if name in self.accounts and self.accounts[name] >= amount:
            self.accounts[name] -= amount
        else:
            print("Insufficient balance")

bank = Bank()
bank.create_account("Alice", 1000)
bank.deposit("Alice", 500)
print("Alice's Balance:", bank.accounts["Alice"])
